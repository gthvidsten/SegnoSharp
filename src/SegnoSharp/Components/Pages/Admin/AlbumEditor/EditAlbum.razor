@page "/admin/albums/{Id:int}"
@rendermode InteractiveServer
@using Whitestone.SegnoSharp.Database.Models
@using Whitestone.SegnoSharp.Database.Extensions
@attribute [Authorize]

@if (Album == null)
{
    <h1 style="color: red">Album not found</h1>
    return;
}
<NavigationLock OnBeforeInternalNavigation="OnBeforeInternalNavigation" />
<h1>Edit album</h1>

<div>
    Added: <em>@Album.Added</em>
</div>

<div style="float: left;margin-right: 20px;">
    <h2>Album data</h2>
    <table class="Editor">
        <tr>
            <th>Title:</th>
            <td><input @bind="Album.Title" /></td>
        </tr>
        <tr>
            <th>Published:</th>
            <td><input @bind="Album.Published" /></td>
        </tr>
        <tr>
            <th>Genres:</th>
            <td>
                <TagList Items="Album.Genres" ExecuteSearch="ExecuteGenreSearch" />
            </td>
        </tr>
        <tr>
            <th>Record labels:</th>
            <td>
                <TagList Items="Album.RecordLabels" ExecuteSearch="ExecuteRecordLabelSearch" />
            </td>
        </tr>
        <tr>
            <th>UPC:</th>
            <td><input @bind="Album.Upc" /></td>
        </tr>
        <tr>
            <th>Catalogue Number:</th>
            <td><input @bind="Album.CatalogueNumber" /></td>
        </tr>
        <tr>
            <th>Public:</th>
            <td><input type="checkbox" @bind="Album.IsPublic" /></td>
        </tr>
    </table>
</div>
<div style="float: left; margin-right: 20px;">
    <h2>People</h2>

    <table class="Editor">
        @foreach (AlbumPersonGroupPersonRelation personGroupRelation in Album.AlbumPersonGroupPersonRelations.OrderBy(r => r.PersonGroup.SortOrder))
        {
            <tr>
                <th>@personGroupRelation.PersonGroup.Name <button title="Remove @personGroupRelation.PersonGroup.Name group" class="TinyDelete" @onclick="() => RemovePersonGroup(personGroupRelation)"><span class="fa-regular fa-circle-xmark"></span></button>:</th>
                <td>
                    <TagList Items="@personGroupRelation.Persons" ExecuteSearch="ExecutePersonSearch" />
                </td>
            </tr>
        }

        @{
            List<PersonGroup> personGroups = PersonGroups
            .Where(pg => Album.AlbumPersonGroupPersonRelations.All(apg => apg.PersonGroup.Id != pg.Id))
            .ToList();

            if (personGroups.Any())
            {
                <tr>
                    <th>Add group:</th>
                    <td>
                        <select @bind="SelectedPersonGroupId">
                            <option value="-1"></option>
                            @foreach (PersonGroup personGroup in personGroups)
                            {
                                <option value="@personGroup.Id">@personGroup.Name</option>
                            }
                        </select>
                        <button @onclick="AddPersonGroup" disabled="@(SelectedPersonGroupId <= 0)">Add</button>
                    </td>
                </tr>
            }
        }
    </table>
</div>
<div style="float: left;">
    <h2>Cover</h2>
    @if (Album.AlbumCover != null)
    {
        <div>
            <img style="max-width: 250px;" src="@Album.AlbumCover.ToInlineBase64()" alt="Album cover" />
        </div>
        <div>
            <button @onclick="RemoveAlbumCover">Remove</button>
        </div>
    }
    else
    {
        <div>
            <InputFile OnChange="AddAlbumCover" accept=".jpg,.jpeg,image/jpeg,.png,image/png" />
        </div>
        @if (AlbumCoverFileSizeError)
        {
            <div class="Error">Image is too large. Max image size is 5MB.</div>
        }
    }
</div>

<div style="clear: both;">
    @foreach (Disc disc in Album.Discs)
    {
        <div>
            <table class="Editor">
                <tr>
                    <th>Disc:</th>
                    <td><input type="number" min="1" max="@(byte.MaxValue)" @bind="disc.DiscNumber" /></td>
                </tr>
                <tr>
                    <th>Title:</th>
                    <td><input @bind="disc.Title" /></td>
                </tr>
                <tr>
                    <th>Media types:</th>
                    <td><TagList Items="disc.MediaTypes" Selection="MediaTypes"></TagList></td>
                </tr>
                <tr>
                    <th>&nbsp;</th>
                    <td>
                        <button @onclick="() => AddTrackGroup(disc)">Add track group</button>
                        <button style="margin-left: 20px;" @onclick="() => DeleteDisc(disc)">Delete disc</button>
                    </td>
                </tr>
            </table>
            <table class="DraggableTable">
                <thead>
                    <tr>
                        <th>&nbsp;</th>
                        <th>Track #</th>
                        <th>Length</th>
                        <th>Title</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (Track track in disc.Tracks.OrderBy(t => t.TrackNumber))
                    {
                        TrackGroup trackGroup = disc.TrackGroups.FirstOrDefault(tg => tg.GroupBeforeTrackNumber == track.TrackNumber);
                        if (trackGroup != null)
                        {
                            <tr draggable="true"
                                ondragover="event.preventDefault();"
                            @ondragstart="() => DragStart(trackGroup)"
                            @ondragend="HandleDragEnd">
                                <td><span class="fa-solid fa-grip"></span></td>
                                <td colspan="3">
                                    <input @bind="@trackGroup.Name" />
                                    <button @onclick="() => RemoveTrackGroup(trackGroup)"><span class="fa-regular fa-circle-xmark"></span></button>
                                </td>
                            </tr>
                        }
                        <tr draggable="true"
                            ondragover="event.preventDefault();"
                        @ondragstart="() => DragStart(track)"
                        @ondrop="() => HandleDrop(track)"
                        @ondragend="HandleDragEnd"
                        @ondragenter="() => HandleDragEnter(track)"
                            class="@(_currentlyDraggingTrack == track ? "drag-current" : _currentlyDraggingOverTrack == track ? "drag-on" : null)">
                            <td><span class="fa-solid fa-grip"></span></td>
                            <td>@track.TrackNumber</td>
                            <td>@track.Duration</td>
                            <td><NavLink href="@($"/admin/albums/track/{track.Id}")">@track.Title</NavLink></td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }
</div>

<div>
    <button @onclick="() => Close()">Close</button>
    <button @onclick="() => Close(true)">Close & Save</button>
    <button style="margin-left: 20px;" @onclick="DeleteTrack">Delete</button>
</div>