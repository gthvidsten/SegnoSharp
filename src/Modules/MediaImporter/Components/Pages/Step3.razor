@page "/admin/mediaimporter/step3"
@layout InnerLayout
@rendermode InteractiveServer
@using Whitestone.SegnoSharp.Database.Models
@using Whitestone.SegnoSharp.Modules.MediaImporter.Components.Layouts
@using Whitestone.SegnoSharp.Modules.MediaImporter.ViewModels
@attribute [Authorize]

<div class="Import">
    <ul class="Steps">
        <li>Select Folder</li>
        <li>Select Files</li>
        <li class="active">Verify Metadata</li>
        <li>Import</li>
    </ul>
    <div class="ImportVerifyMetadata">
        <div>
            @if (ImporterState.AlbumsToImport == null)
            {
                <span>Nothing to import. Please redo the previous steps.</span>
            }
            else
            {

                @foreach (AlbumViewModel album in ImporterState.AlbumsToImport.OrderBy(a => a.Title))
                {
                    <div class="AlbumInfo">
                        @if (album.AlbumAlreadyExists)
                        {
                            <div class="AlreadyExists">Warning!<br />Album already exists. Tracks below will be added as new media to the existing album. Album info will not be updated.</div>
                            <div>
                                <button @onclick="() => CreateAlbumNameCopy(album)">Create a copy</button>
                            </div>
                        }
                        else
                        {
                            <div class="AlbumCover">
                                @if (album.CoverImage != null)
                                {
                                    <div>
                                        <img src="@album.CoverImage" alt="Album cover" />
                                    </div>
                                    <div>
                                        <button @onclick="() => OnAlbumCoverRemoveClick(album)">Remove</button>
                                    </div>
                                }
                                else
                                {
                                    <div>
                                        <InputFile OnChange="e => LoadAlbumCover(e, album)" accept=".jpg,.jpeg,image/jpeg,.png,image/png" />
                                    </div>
                                    @if (album.AlbumCoverFileSizeError)
                                    {
                                        <div class="Error">Image is too large. Max image size is 5MB.</div>
                                    }
                                }
                            </div>
                            <input type="text" @bind="@album.Title" class="Title" @bind:after="() => AlbumNameChanged(album)" />
                            <table>
                                <tbody>
                                    <tr>
                                        <th>Published:</th>
                                        <td><input type="number" @bind="@album.Published" /></td>
                                    </tr>
                                    <tr>
                                        <th>Genres:</th>
                                        <td><input type="text" @bind="@(album.GenresString)" /></td>
                                    </tr>
                                    <tr>
                                        <th>Album artist(s):</th>
                                        <td><input type="text" @bind="@(album.AlbumArtistString)" /></td>
                                    </tr>
                                    <tr>
                                        <th><label for="@(album.TempId + "-isPublic")">Is public:</label></th>
                                        <td><input id="@(album.TempId + "-isPublic")" type="checkbox" @bind="@album.IsPublic" /></td>
                                    </tr>
                                </tbody>
                            </table>
                        }
                    </div>

                    @foreach (Disc disc in album.Discs.OrderBy(d => d.DiscNumber))
                    {
                        <div class="MediaInfo">
                            Media <input type="number" @bind="@disc.DiscNumber" class="Number" />
                            - Type:
                            <select @bind="@(((DiscViewModel)disc).SelectedMediaType)">
                                <option value="-1"></option>
                                @foreach (MediaType mediaType in MediaTypes)
                                {
                                    <option value="@mediaType.Id">@mediaType.Name</option>
                                }
                            </select>
                        </div>
                        <div class="Tracks">
                            <div class="FakeTable">
                                <div class="th">&nbsp;</div><!-- These 'weird' comments are to make the divs be on the same "line", and therefore not have a whitespace between them.
                                --><div class="th">Track #</div><!--
                                --><div class="th">Length</div><!--
                                --><div class="th">Autoplay</div><!--
                                --><div class="th">Title</div><!--
                                --><div class="th">Artist(s)</div><!--
                                --><div class="th">Composer(s)</div>

                                @{
                                    var trackCounter = 1;
                                }
                                @foreach (Track track in disc.Tracks.OrderBy(t => t.TrackNumber))
                                {
                                    int currentTrackNumber = trackCounter; // Using trackCounter directly makes it the same across all tracks, so take a copy of it first
                                    <div draggable="true"
                                         class="@(((TrackViewModel)track).CssClass) Track tr"
                                         ondragover="event.preventDefault();"
                                    @ondragstart="() => OnDragStart((TrackViewModel)track)"
                                    @ondrop="() => HandleDrop((TrackViewModel)track)"
                                    @ondragend="HandleDragEnd"
                                    @ondragenter="((TrackViewModel)track).HandleDragEnter"
                                    @ondragleave="((TrackViewModel)track).HandleDragLeave">
                                        <div class="td"><span class="fa-solid fa-grip"></span></div><!--
                                        --><div class="td"><input type="number" @bind="@track.TrackNumber" class="Number" @bind:after="() => TrackNumberChanged(track, currentTrackNumber)" /></div><!--
                                        --><div class="td"><input type="text" @bind="@track.Duration" class="Duration" /></div><!--
                                        --><div class="td"><input type="checkbox" @bind="@(((TrackViewModel)track).IncludeInAutoPlaylist)" disabled="@(((TrackViewModel)track).AutoPlaylistDisabled)" /></div><!--
                                        --><div class="td"><input type="text" @bind="@track.Title" class="Title" /></div><!--
                                        --><div class="td"><input type="text" @bind="@(((TrackViewModel)track).ArtistString)" class="Artist" /></div><!--
                                        --><div class="td"><input type="text" @bind="@(((TrackViewModel)track).ComposerString)" class="Composer" /></div>
                                    </div>
                                    {
                                        trackCounter++;
                                    }
                                }
                            </div>
                        </div>
                    }
                }
            }
        </div>
        <div class="NextBack">
            <button @onclick="OnNextClick">Next &gt;</button>
            <button @onclick="OnBackClick">&lt; Back</button>
        </div>
    </div>
</div>